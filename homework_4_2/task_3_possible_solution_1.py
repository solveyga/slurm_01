# считывается введенное значение и приводится к типу int
value = int(input())
count = 1
# список из строк, элементами будут другие списки
rows = []

# для i в диапазоне от введенного числа до 0 с шагом -1
for i in range(value, 0, -1):
    # в каждой итерации список пустой, это типа строка
    row = []
    # для каждой i-ой итерации в диапазоне от 0 до i-1
    for _ in range(i):
        # добавление в конец списка count
        row.append(count)
        # увеличение добавляемого числа на 1
        count += 1
    # в конце i-ой итерации записывается перевернутый полученный список
    rows.append(reversed(row))

# вывод полученной таблицы, для каждого списка (строки) внутри списка (таблицы)
for row in reversed(rows):
    # map - функция, которая применяет указанную функцию (str) к итерируемому объекту (row) без цикла
    # то есть (map(str, row) из полученных ранее списков row делает строки
    # str.join(iterable) создает строку из списка строк, str - строка-разделитель
    # то есть из полученных строк создается одна строка с пробелом-разделителем (??? нет, как будто иначе должно быть)
    r = ' '.join(map(str, row))
    # :> - отступ справа (перед строкой), почему отступ везде одинаковый, как это работает и что дает?
    # Как будто это именно выравнивание, то есть сколько бы символов ни было, любая строка содержит ровно 12 символов (value * 3)
    print(f"{r:>{value * 3}}")
